name: UI CI/CD Pipeline


# Trigger logic
on:
  # Triggered by pushes to the main branch related to the UI microservice
  push:
    branches:
      - main
    paths:
      - 'ui/**'
  # Manual trigger for debug
  workflow_dispatch:


# Default work directory
defaults:
  run:
    working-directory: ./ui


# CI and CD jobs
jobs:
  # CI Pipeline
  # 1. Lints the python code with Pylint
  lint_python:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      # Install requirements
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run Pylint on the codebase
      - name: Run Pylint
        run: |
          pylint --rcfile ../.pylintrc.toml ui/

  # 2. Lints the Dockerfile with Hadolint
  lint_docker:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Run Hadolint on Dockerfile
      - name: Run Hadolint
        run: |
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          ./hadolint --config ../.hadolint.yml Dockerfile

  # 3. Unit testing the code
  unit_tests:
    # Ensures lint_python completes successfully before running tests
    needs: lint_python
    runs-on: ubuntu-latest

    steps:
      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run unit tests using Pytest
      - name: Run Pytest
        run: |
          pytest tests/

  # 4. Build Docker image
  docker_build_push:
    # Ensures unit_tests and lint_docker are completed successfully before running
    needs: [unit_tests, lint_docker]
    runs-on: ubuntu-latest

    steps:
      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Build the image
      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/${{ github.repository }}-ui:latest .

      # Log in to GH Container Registry
      - name: Log in to GitHub Container Registry
        if: |
          (github.event_name == 'push' && github.ref == 'refs/heads/main')
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Push the image to the Container Registry
      - name: Push Docker image
        if: |
          (github.event_name == 'push' && github.ref == 'refs/heads/main')
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/${{ github.repository }}-ui:latest
  

  # CD Pipeline
  # 1. Triggers re-deploy on the hosted server
  deploy:
    # Ensure docker_build_push completes successfully before running
    needs: docker_build_push
    runs-on: ubuntu-latest

    steps:
      # Trigger re-deploy
      - name: Trigger Deploy on Render
        if: |
          (github.event_name == 'push' && github.ref == 'refs/heads/main')
        run: |
          curl -X POST "${{ secrets.HOMELENS_CA_UI_DEPLOY_HOOK }}"
